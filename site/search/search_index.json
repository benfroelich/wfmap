{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to wfmap Documentation \u00b6 Introduction \u00b6 wfmap helps you understand wafer process data better, by presenting the data with heatmap and trend charts by flash field/shot. You can identify abnormal patterns intuitively in a global perspective and make it easier to compare and find potential correlation betweens different wafer parameters. This documentation provides comprehensive introduction from Data Preparation to Various Examples . Example Gallery introduces you to the ability to use the APIs of wfmap with the demo data enclosed. You can dive it deeper by reading the API Reference or even the source code . A GUI application WaferViz is also provided for non-technical users. Let\u2019s roll! Installation \u00b6 It\u2019s recommended to install wfmap via PyPI using pip: pip install wfmap or build the latest build from Github: git clone https://github.com/xlhaw/wfmap.git cd wfmap python setup.py install A GUI application built with Gooey is also shipped together, you can launch it from command line: git clone https://github.com/xlhaw/wfmap.git cd wfmap/gui pip install -r requirements.txt python main.py Please read the WaferViz for more details. Example Gallery \u00b6 Gallery contains various examples from basic heatmap to highly customized wafer map & trend charts, it is a good start to learn the basic usage of this package. The examples & images were all generated by mkdocs-gallery . Contributing \u00b6","title":"Home"},{"location":"#welcome-to-wfmap-documentation","text":"","title":"Welcome to wfmap Documentation"},{"location":"#introduction","text":"wfmap helps you understand wafer process data better, by presenting the data with heatmap and trend charts by flash field/shot. You can identify abnormal patterns intuitively in a global perspective and make it easier to compare and find potential correlation betweens different wafer parameters. This documentation provides comprehensive introduction from Data Preparation to Various Examples . Example Gallery introduces you to the ability to use the APIs of wfmap with the demo data enclosed. You can dive it deeper by reading the API Reference or even the source code . A GUI application WaferViz is also provided for non-technical users. Let\u2019s roll!","title":"Introduction"},{"location":"#installation","text":"It\u2019s recommended to install wfmap via PyPI using pip: pip install wfmap or build the latest build from Github: git clone https://github.com/xlhaw/wfmap.git cd wfmap python setup.py install A GUI application built with Gooey is also shipped together, you can launch it from command line: git clone https://github.com/xlhaw/wfmap.git cd wfmap/gui pip install -r requirements.txt python main.py Please read the WaferViz for more details.","title":"Installation"},{"location":"#example-gallery","text":"Gallery contains various examples from basic heatmap to highly customized wafer map & trend charts, it is a good start to learn the basic usage of this package. The examples & images were all generated by mkdocs-gallery .","title":"Example Gallery"},{"location":"#contributing","text":"","title":"Contributing"},{"location":"changelog/","text":"Changelogs \u00b6 All notable changes to the wfmap package will be documented in this file. [1.0.3] \u00b6 Bug Fixes \u00b6 Fix matplotlib warning Fix Thanks Fix legend display issue in wif_trends and add limitation on max plot items Features \u00b6 Add new param majority in wif_trend for control Add wif_corrplot for correlation plot Documentation Online [1.0.2] \u00b6 Bug Fixes \u00b6 Unify the behaviors of grid lines when different matplotlib styles were applied Fix default title of create_incmap to None [1.0.0] \u00b6 Features \u00b6 Add more customized wafer heatmap and trend charts, such as DefectMap, IncomingMap, Trend Charts by Flash Field/Shot Add demo GUI program built with Gooey Add demo data and examples Changed \u00b6 Refactor original wafermap function to num_heatmap & cat_heatmap by numerical & categorical variables respectively Improve the documentation and tutorials :vulcan_salute: [0.0.7] \u00b6 Added \u00b6 Add color histogram subplot for Wafer heatmap Add pie chart inset and yield annotation for categorical variables [0.0.1] \u00b6 First release. \ud83c\udf89\ud83c\udf89\ud83c\udf89","title":"ChangeLogs"},{"location":"changelog/#changelogs","text":"All notable changes to the wfmap package will be documented in this file.","title":"Changelogs"},{"location":"changelog/#103","text":"","title":"[1.0.3]"},{"location":"changelog/#bug-fixes","text":"Fix matplotlib warning Fix Thanks Fix legend display issue in wif_trends and add limitation on max plot items","title":"Bug Fixes"},{"location":"changelog/#features","text":"Add new param majority in wif_trend for control Add wif_corrplot for correlation plot Documentation Online","title":"Features"},{"location":"changelog/#102","text":"","title":"[1.0.2]"},{"location":"changelog/#bug-fixes_1","text":"Unify the behaviors of grid lines when different matplotlib styles were applied Fix default title of create_incmap to None","title":"Bug Fixes"},{"location":"changelog/#100","text":"","title":"[1.0.0]"},{"location":"changelog/#features_1","text":"Add more customized wafer heatmap and trend charts, such as DefectMap, IncomingMap, Trend Charts by Flash Field/Shot Add demo GUI program built with Gooey Add demo data and examples","title":"Features"},{"location":"changelog/#changed","text":"Refactor original wafermap function to num_heatmap & cat_heatmap by numerical & categorical variables respectively Improve the documentation and tutorials :vulcan_salute:","title":"Changed"},{"location":"changelog/#007","text":"","title":"[0.0.7]"},{"location":"changelog/#added","text":"Add color histogram subplot for Wafer heatmap Add pie chart inset and yield annotation for categorical variables","title":"Added"},{"location":"changelog/#001","text":"First release. \ud83c\udf89\ud83c\udf89\ud83c\udf89","title":"[0.0.1]"},{"location":"data/","text":"Data Guide \u00b6 This chapter will guide you through the preparation of wafer data. You will get an overview of data format used in wfmap , learn the wafer mapping definition and how to merge it with other data source. Definition \u00b6 Wafer mapping definition used in this package is showed in follwing table, which might be slightly different as the terminology in your industry. Parameter Definition Data Type MAP_ROW y : vertical coordinate of the die in the wafermap Integer MAP_COL x : horizontal coordinate of the die in the wafermap Integer FF_ROW yn : vertical coordinate of flash field Integer FF_COL xn : horizontal coordinate of flash field Integer WIF_ROW vertical coordinate of the die in the corresponding flash field Integer WIF_COL horizontal coordinate of the die in the corresponding flash field Integer FF_SHAPE (max(FF_ROW),max(FF_COL)): Total Flash Fields by FF Row&Col Tuple FF_SIZE (max(WIF_ROW),max(WIF_COL)): Total Dies in a Flash Field by Die Row&Col Tuple FF is short for FlashField , WIF stands for Within FlashField . First two parameters are required in wafer heatmap related plots and succedent 4 parameters are need for trends charts related plots. So please make sure that you have either transformed your data in similar format or pass the correct parameters to corresponding functions. Below is an illustration for above definition. Sample Data \u00b6 Sample data is shipped within this packages, you can load it as following snippet: from wfmap.data import load_data data = load_data () Besides the first 6 columns which define the wafer mapping information, additional 1 categorical feature DEFECT & 4 numerial features( MR , HR , HDI , MR2 ) are included for demostration. data . head () Merge Other Data \u00b6 In most common scenario, wafer data from other source is processed and stored separately by unique DeviceID such as OCR , rather than wafer data MAP_ROW & MAP_COL . Since wafer map definition is not included, You\u2019ll need to merge it with wafer map data manually. In my practice, I saved the wafer mapping data as pickle file by different wafer type in advance. Then can load it from local directory, no need to read corresponding wafer data from file server or database. Here\u2019s a sample snippets for your reference, which enable to merge the wafer map data from either local pickle file or extract it from wafer incoming data. from wfdata import Wafer # Load for Wafer Incoming Data def merge_wfmap ( df , ocr_col = 'SLIDER_OCR_NO' , mode = 'AUTO' , join = 'outer' , inc_data = False , map_dir = 'D:\\MAP_DATA' ): \"\"\" `SLIDER_OCR_NO` = `Wafer` + `OCR` \"\"\" assert mode in [ 'AUTO' , 'UP' , 'UP2' , 'UP3' , 'UP2S' , 'UP3S' ], print ( 'Wafer Format Not Suppported!!' ) assert join in [ 'inner' , 'outer' ], print ( 'Merge Method Not Suppported!!' ) df [ 'Wafer' ] = df [ ocr_col ] . map ( lambda x : x [: 5 ]) df [ 'OCR' ] = df [ ocr_col ] . map ( lambda x : x [ - 5 :]) df . set_index ( 'OCR' , inplace = True ) result = [] for wf , dff in df . groupby ( 'Wafer' ): if mode == 'AUTO' : if inc_data : map_data = Wafer ( \"H\" + wf ) . inc_data () else : map_data = Wafer ( \"H\" + wf ) . map_data () else : map_data = pd . read_pickle ( f ' { map_dir } / { mode } ' ) merged = pd . merge ( map_data , dff , right_index = True , left_index = True , how = join ) merged = merged . drop_duplicates ( subset = [ 'MAP_ROW' , 'MAP_COL' ]) result . append ( merged ) return pd . concat ( result )","title":"Data Guide"},{"location":"data/#data-guide","text":"This chapter will guide you through the preparation of wafer data. You will get an overview of data format used in wfmap , learn the wafer mapping definition and how to merge it with other data source.","title":"Data Guide"},{"location":"data/#definition","text":"Wafer mapping definition used in this package is showed in follwing table, which might be slightly different as the terminology in your industry. Parameter Definition Data Type MAP_ROW y : vertical coordinate of the die in the wafermap Integer MAP_COL x : horizontal coordinate of the die in the wafermap Integer FF_ROW yn : vertical coordinate of flash field Integer FF_COL xn : horizontal coordinate of flash field Integer WIF_ROW vertical coordinate of the die in the corresponding flash field Integer WIF_COL horizontal coordinate of the die in the corresponding flash field Integer FF_SHAPE (max(FF_ROW),max(FF_COL)): Total Flash Fields by FF Row&Col Tuple FF_SIZE (max(WIF_ROW),max(WIF_COL)): Total Dies in a Flash Field by Die Row&Col Tuple FF is short for FlashField , WIF stands for Within FlashField . First two parameters are required in wafer heatmap related plots and succedent 4 parameters are need for trends charts related plots. So please make sure that you have either transformed your data in similar format or pass the correct parameters to corresponding functions. Below is an illustration for above definition.","title":"Definition"},{"location":"data/#sample-data","text":"Sample data is shipped within this packages, you can load it as following snippet: from wfmap.data import load_data data = load_data () Besides the first 6 columns which define the wafer mapping information, additional 1 categorical feature DEFECT & 4 numerial features( MR , HR , HDI , MR2 ) are included for demostration. data . head ()","title":"Sample Data"},{"location":"data/#merge-other-data","text":"In most common scenario, wafer data from other source is processed and stored separately by unique DeviceID such as OCR , rather than wafer data MAP_ROW & MAP_COL . Since wafer map definition is not included, You\u2019ll need to merge it with wafer map data manually. In my practice, I saved the wafer mapping data as pickle file by different wafer type in advance. Then can load it from local directory, no need to read corresponding wafer data from file server or database. Here\u2019s a sample snippets for your reference, which enable to merge the wafer map data from either local pickle file or extract it from wafer incoming data. from wfdata import Wafer # Load for Wafer Incoming Data def merge_wfmap ( df , ocr_col = 'SLIDER_OCR_NO' , mode = 'AUTO' , join = 'outer' , inc_data = False , map_dir = 'D:\\MAP_DATA' ): \"\"\" `SLIDER_OCR_NO` = `Wafer` + `OCR` \"\"\" assert mode in [ 'AUTO' , 'UP' , 'UP2' , 'UP3' , 'UP2S' , 'UP3S' ], print ( 'Wafer Format Not Suppported!!' ) assert join in [ 'inner' , 'outer' ], print ( 'Merge Method Not Suppported!!' ) df [ 'Wafer' ] = df [ ocr_col ] . map ( lambda x : x [: 5 ]) df [ 'OCR' ] = df [ ocr_col ] . map ( lambda x : x [ - 5 :]) df . set_index ( 'OCR' , inplace = True ) result = [] for wf , dff in df . groupby ( 'Wafer' ): if mode == 'AUTO' : if inc_data : map_data = Wafer ( \"H\" + wf ) . inc_data () else : map_data = Wafer ( \"H\" + wf ) . map_data () else : map_data = pd . read_pickle ( f ' { map_dir } / { mode } ' ) merged = pd . merge ( map_data , dff , right_index = True , left_index = True , how = join ) merged = merged . drop_duplicates ( subset = [ 'MAP_ROW' , 'MAP_COL' ]) result . append ( merged ) return pd . concat ( result )","title":"Merge Other Data"},{"location":"docstrings/","text":"Below API docs are auto-generated by mkdocstrings . num_heatmap ( df , value , row = 'MAP_ROW' , col = 'MAP_COL' , cmap = 'jet' , title = None , vlim = None , vsigma = None , vrange = None , ax = None ) \u00b6 Create Wafer Heatmap for Numerical Variable Parameters: Name Type Description Default df pd . DataFrame Wafer Data required value str Column name of the numeric variable required row str Wafer Map Row (Y Coordinate) 'MAP_ROW' col str Wafer Map Col (X Coordinate) 'MAP_COL' cmap str ColorMap 'jet' title str Title None vlim tuple (zmin,zmax) limits of the colorbar, will ignore the vsigma/vrange if provided None vsigma float colorbar range is center mean\u00b13*vsigma if vsigma is provided None vrange float Range of the colorbar, works when vlim is not available and ignore the vsigma None ax matplotlib . axes Axe to plot on None Returns: Name Type Description ax matplotlib . axes Matplotlib Axes cat_heatmap ( df , item , row = 'MAP_ROW' , col = 'MAP_COL' , title = None , code_dict = None , qty_limit = 10 , colors = DEFECT_COLORS , verbose = False , ax = None ) \u00b6 Create Wafer Heatmap for Categorical Variable Parameters: Name Type Description Default df pd . DataFrame Wafer Data required item str Column name of the categorical variable required row str Wafer Map Row (Y Coordinate) 'MAP_ROW' col str Wafer Map Col (X Coordinate) 'MAP_COL' title str Title None code_dict dict {\u2018orignal\u2019:\u2019new_code\u2019} Replace original code with code_dict None qty_limit int add restrictions on the total unique variables to plot 10 colors list [\u2018lightgreen\u2019, \u2018red\u2019, \u2018orange\u2019, \u2018blue\u2019, \u2018purple\u2019, \u2018cyan\u2019, \u2018pink\u2019, \u2018yellow\u2019, \u2018lightblue\u2019, \u2018gold\u2019, \u2018darkblue\u2019, \u2018gray\u2019, \u2018darkred\u2019, \u2018black\u2019] DEFECT_COLORS verbose bool Return the summary of categorical data or not. False ax matplotlib . axes Axe to plot on None Returns: Name Type Description ax matplotlib . axes Matplotlib Axes and additional data if verbose is True wafermap ( df , value , row = 'MAP_ROW' , col = 'MAP_COL' , title = None , vrange = None , vsigma = None , wftype = None ) \u00b6 Create Wafer Heatmap Parameters: Name Type Description Default df pd . DataFrame Wafer Data required value str Column name of the numeric variable required row str Wafer Map Row (Y Coordinate) 'MAP_ROW' col str Wafer Map Col (X Coordinate) 'MAP_COL' title str Title None vrange float Range of Y-axis/Colorbar, will overide the vsigma setting None vsigma float color bar range is center mean\u00b13*vsigma if vsigma is provided None wftype str Wafer Layout Type , Plot additional trend chart if provided None Returns: Name Type Description fig matplotlib . figure . Figure Figure defectmap ( df , defect_col , ok_codes = [ 'OK' , 'BINA' ], code_dict = None , row = 'MAP_ROW' , col = 'MAP_COL' , qty_limit = 10 , colors = DEFECT_COLORS , title = None ) \u00b6 Create Wafer DefectMap Parameters: Name Type Description Default df pd . DataFrame Wafer Data required defect_col str Column name of the defect code required ok_codes list list of code being treated as \u2018OK\u2019 ['OK', 'BINA'] code_dict dict {\u2018orignal\u2019:\u2019new_code\u2019} Replace original code with code_dict None row str Wafer Map Row (Y Coordinate) 'MAP_ROW' col str Wafer Map Col (X Coordinate) 'MAP_COL' qty_limit int add restrictions on the total unique variables to show in the plot 10 colors list [\u2018lightgreen\u2019, \u2018red\u2019, \u2018orange\u2019, \u2018blue\u2019, \u2018purple\u2019, \u2018cyan\u2019, \u2018pink\u2019, \u2018yellow\u2019, \u2018lightblue\u2019, \u2018gold\u2019, \u2018darkblue\u2019, \u2018gray\u2019, \u2018darkred\u2019, \u2018black\u2019] DEFECT_COLORS title str Title None Returns: Name Type Description fig matplotlib . figure . Figure Figure wif_trend ( df , y , x = 'WIF_COL' , yn = 'FF_ROW' , xn = 'FF_COL' , wftype = 'UP2' , majority = 90 , method = 'median' , title = None , ylim = None , yrange = None , color = 'b' , style = '.' ) \u00b6 Create Wafer Trend Chart by Flash Field Parameters: Name Type Description Default df pd . DataFrame Wafer Data required y str Column name of the numeric variable to plot required x str Column name(and x_label) of x-axis 'WIF_COL' yn str Y Coordinate of Flash Field/Subplot 'FF_ROW' xn str X Coordinate of Flash Field/Subplot 'FF_COL' wftype str Wafer Layout Type [\u2018UP\u2019|\u2019UP2\u2019|\u2019UP3\u2019|\u2019UP2E\u2019|\u2019UP3E\u2019] 'UP2' majority int Center Percentage of Population used for Estimation 90 method str \u2018mean\u2019 or \u2018median\u2019 Trend 'median' title str Title None ylim tuple (ymin:float,ymax:float) None yrange float Range of Y-axis, ignored if ylim is provided None color str Color of the trend line 'b' style str Style of the trend line '.' Returns: Name Type Description fig matplotlib . figure . Figure Figure wif_trends ( df , ys , x = 'WIF_COL' , yn = 'FF_ROW' , xn = 'FF_COL' , wftype = 'UP2' , method = 'median' , title = None , ylim = None , yrange = None ) \u00b6 Create Wafer Trend Charts by Flash Field (when numerical variables share similar ranges) Parameters: Name Type Description Default df pd . DataFrame Wafer Data required ys list List of column names to plot required x str Column name(and x_label) of x-axis 'WIF_COL' yn str Y Coordinate of Flash Field/Subplot 'FF_ROW' xn str X Coordinate of Flash Field/Subplot 'FF_COL' wftype str Wafer Layout Type [\u2018UP\u2019|\u2019UP2\u2019|\u2019UP3\u2019|\u2019UP2E\u2019|\u2019UP3E\u2019] 'UP2' method str \u2018mean\u2019 or \u2018median\u2019 Trend 'median' title str Title None ylim tuple (ymin:float,ymax:float) None yrange float Range of Y-axis, ignored if ylim is provided None Returns: Name Type Description fig matplotlib . figure . Figure Figure twin_trends ( df , y , ty , x = 'WIF_COL' , yn = 'FF_ROW' , xn = 'FF_COL' , wftype = 'UP2' , method = 'median' , title = None , yrange = None , tyrange = None , fix_scale = True ) \u00b6 Create Wafer Trend Charts by Flash Field (when two variables have very different ranges) Parameters: Name Type Description Default df pd . DataFrame Wafer Data required y str Column name of the variable to plot on the primary axis required ty str Column name of the variable to plot on the secondary axis required x str Column name(and x_label) of x-axis 'WIF_COL' yn str Y Coordinate of Flash Field/Subplot 'FF_ROW' xn str X Coordinate of Flash Field/Subplot 'FF_COL' wftype str Wafer Layout Type [\u2018UP\u2019|\u2019UP2\u2019|\u2019UP3\u2019|\u2019UP2E\u2019|\u2019UP3E\u2019] 'UP2' method str \u2018mean\u2019 or \u2018median\u2019 Trend 'median' title str Title None yrange float Range of Y-axis None tyrange float Range of 2nd Y-axis None fix_scale bool Keep the same scale or Not True Returns: Name Type Description fig matplotlib . figure . Figure Figure wif_corrplot ( df , x , y , yn = 'FF_ROW' , xn = 'FF_COL' , wftype = 'UP2' , fit_deg = 1 , title = None ) \u00b6 Create Correlation Plot between two continuous variables by Flash Field Parameters: Name Type Description Default df pd . DataFrame Wafer Data required x str Column name(and x_label) of x-axis required y str Column name of the variable to plot on the primary axis required yn str Y Coordinate of Flash Field/Subplot 'FF_ROW' xn str X Coordinate of Flash Field/Subplot 'FF_COL' wftype str Wafer Layout Type [\u2018UP\u2019|\u2019UP2\u2019|\u2019UP3\u2019|\u2019UP2E\u2019|\u2019UP3E\u2019] 'UP2' fit_deg int Polynomial fit degree 1 title str Title None Returns: Name Type Description fig matplotlib . figure . Figure Figure","title":"API Reference"},{"location":"docstrings/#wfmap.num_heatmap","text":"Create Wafer Heatmap for Numerical Variable Parameters: Name Type Description Default df pd . DataFrame Wafer Data required value str Column name of the numeric variable required row str Wafer Map Row (Y Coordinate) 'MAP_ROW' col str Wafer Map Col (X Coordinate) 'MAP_COL' cmap str ColorMap 'jet' title str Title None vlim tuple (zmin,zmax) limits of the colorbar, will ignore the vsigma/vrange if provided None vsigma float colorbar range is center mean\u00b13*vsigma if vsigma is provided None vrange float Range of the colorbar, works when vlim is not available and ignore the vsigma None ax matplotlib . axes Axe to plot on None Returns: Name Type Description ax matplotlib . axes Matplotlib Axes","title":"num_heatmap()"},{"location":"docstrings/#wfmap.cat_heatmap","text":"Create Wafer Heatmap for Categorical Variable Parameters: Name Type Description Default df pd . DataFrame Wafer Data required item str Column name of the categorical variable required row str Wafer Map Row (Y Coordinate) 'MAP_ROW' col str Wafer Map Col (X Coordinate) 'MAP_COL' title str Title None code_dict dict {\u2018orignal\u2019:\u2019new_code\u2019} Replace original code with code_dict None qty_limit int add restrictions on the total unique variables to plot 10 colors list [\u2018lightgreen\u2019, \u2018red\u2019, \u2018orange\u2019, \u2018blue\u2019, \u2018purple\u2019, \u2018cyan\u2019, \u2018pink\u2019, \u2018yellow\u2019, \u2018lightblue\u2019, \u2018gold\u2019, \u2018darkblue\u2019, \u2018gray\u2019, \u2018darkred\u2019, \u2018black\u2019] DEFECT_COLORS verbose bool Return the summary of categorical data or not. False ax matplotlib . axes Axe to plot on None Returns: Name Type Description ax matplotlib . axes Matplotlib Axes and additional data if verbose is True","title":"cat_heatmap()"},{"location":"docstrings/#wfmap.wafermap","text":"Create Wafer Heatmap Parameters: Name Type Description Default df pd . DataFrame Wafer Data required value str Column name of the numeric variable required row str Wafer Map Row (Y Coordinate) 'MAP_ROW' col str Wafer Map Col (X Coordinate) 'MAP_COL' title str Title None vrange float Range of Y-axis/Colorbar, will overide the vsigma setting None vsigma float color bar range is center mean\u00b13*vsigma if vsigma is provided None wftype str Wafer Layout Type , Plot additional trend chart if provided None Returns: Name Type Description fig matplotlib . figure . Figure Figure","title":"wafermap()"},{"location":"docstrings/#wfmap.defectmap","text":"Create Wafer DefectMap Parameters: Name Type Description Default df pd . DataFrame Wafer Data required defect_col str Column name of the defect code required ok_codes list list of code being treated as \u2018OK\u2019 ['OK', 'BINA'] code_dict dict {\u2018orignal\u2019:\u2019new_code\u2019} Replace original code with code_dict None row str Wafer Map Row (Y Coordinate) 'MAP_ROW' col str Wafer Map Col (X Coordinate) 'MAP_COL' qty_limit int add restrictions on the total unique variables to show in the plot 10 colors list [\u2018lightgreen\u2019, \u2018red\u2019, \u2018orange\u2019, \u2018blue\u2019, \u2018purple\u2019, \u2018cyan\u2019, \u2018pink\u2019, \u2018yellow\u2019, \u2018lightblue\u2019, \u2018gold\u2019, \u2018darkblue\u2019, \u2018gray\u2019, \u2018darkred\u2019, \u2018black\u2019] DEFECT_COLORS title str Title None Returns: Name Type Description fig matplotlib . figure . Figure Figure","title":"defectmap()"},{"location":"docstrings/#wfmap.wif_trend","text":"Create Wafer Trend Chart by Flash Field Parameters: Name Type Description Default df pd . DataFrame Wafer Data required y str Column name of the numeric variable to plot required x str Column name(and x_label) of x-axis 'WIF_COL' yn str Y Coordinate of Flash Field/Subplot 'FF_ROW' xn str X Coordinate of Flash Field/Subplot 'FF_COL' wftype str Wafer Layout Type [\u2018UP\u2019|\u2019UP2\u2019|\u2019UP3\u2019|\u2019UP2E\u2019|\u2019UP3E\u2019] 'UP2' majority int Center Percentage of Population used for Estimation 90 method str \u2018mean\u2019 or \u2018median\u2019 Trend 'median' title str Title None ylim tuple (ymin:float,ymax:float) None yrange float Range of Y-axis, ignored if ylim is provided None color str Color of the trend line 'b' style str Style of the trend line '.' Returns: Name Type Description fig matplotlib . figure . Figure Figure","title":"wif_trend()"},{"location":"docstrings/#wfmap.wif_trends","text":"Create Wafer Trend Charts by Flash Field (when numerical variables share similar ranges) Parameters: Name Type Description Default df pd . DataFrame Wafer Data required ys list List of column names to plot required x str Column name(and x_label) of x-axis 'WIF_COL' yn str Y Coordinate of Flash Field/Subplot 'FF_ROW' xn str X Coordinate of Flash Field/Subplot 'FF_COL' wftype str Wafer Layout Type [\u2018UP\u2019|\u2019UP2\u2019|\u2019UP3\u2019|\u2019UP2E\u2019|\u2019UP3E\u2019] 'UP2' method str \u2018mean\u2019 or \u2018median\u2019 Trend 'median' title str Title None ylim tuple (ymin:float,ymax:float) None yrange float Range of Y-axis, ignored if ylim is provided None Returns: Name Type Description fig matplotlib . figure . Figure Figure","title":"wif_trends()"},{"location":"docstrings/#wfmap.twin_trends","text":"Create Wafer Trend Charts by Flash Field (when two variables have very different ranges) Parameters: Name Type Description Default df pd . DataFrame Wafer Data required y str Column name of the variable to plot on the primary axis required ty str Column name of the variable to plot on the secondary axis required x str Column name(and x_label) of x-axis 'WIF_COL' yn str Y Coordinate of Flash Field/Subplot 'FF_ROW' xn str X Coordinate of Flash Field/Subplot 'FF_COL' wftype str Wafer Layout Type [\u2018UP\u2019|\u2019UP2\u2019|\u2019UP3\u2019|\u2019UP2E\u2019|\u2019UP3E\u2019] 'UP2' method str \u2018mean\u2019 or \u2018median\u2019 Trend 'median' title str Title None yrange float Range of Y-axis None tyrange float Range of 2nd Y-axis None fix_scale bool Keep the same scale or Not True Returns: Name Type Description fig matplotlib . figure . Figure Figure","title":"twin_trends()"},{"location":"docstrings/#wfmap.wif_corrplot","text":"Create Correlation Plot between two continuous variables by Flash Field Parameters: Name Type Description Default df pd . DataFrame Wafer Data required x str Column name(and x_label) of x-axis required y str Column name of the variable to plot on the primary axis required yn str Y Coordinate of Flash Field/Subplot 'FF_ROW' xn str X Coordinate of Flash Field/Subplot 'FF_COL' wftype str Wafer Layout Type [\u2018UP\u2019|\u2019UP2\u2019|\u2019UP3\u2019|\u2019UP2E\u2019|\u2019UP3E\u2019] 'UP2' fit_deg int Polynomial fit degree 1 title str Title None Returns: Name Type Description fig matplotlib . figure . Figure Figure","title":"wif_corrplot()"},{"location":"gui/","text":"WaferViz \u00b6 WaferViz is a small GUI tool which wraps wfmap to create fancy Wafer Map/Trend Plots. Installation \u00b6 Launch the application from command line as below: git clone https://github.com/xlhaw/wfmap.git cd wfmap/gui pip install -r requirements.txt python main.py Since the package size by Pyinstaller is huge, the pre-compiled binary is not uploaded. Plan to rewrite with other approaches, eg Tauri/Pyodide/Quarto to package & distribute it in the future. Configuration \u00b6 Default settings are saved in the config.yml file, open with any text editor if need modification. Basic Usage \u00b6 Data Download \u00b6 WaferMap \u00b6 DefectMap \u00b6 IncomingMap \u00b6 WIF Trend \u00b6 WIF Trends \u00b6 TwinY Trends \u00b6","title":"GUI Application"},{"location":"gui/#waferviz","text":"WaferViz is a small GUI tool which wraps wfmap to create fancy Wafer Map/Trend Plots.","title":"WaferViz"},{"location":"gui/#installation","text":"Launch the application from command line as below: git clone https://github.com/xlhaw/wfmap.git cd wfmap/gui pip install -r requirements.txt python main.py Since the package size by Pyinstaller is huge, the pre-compiled binary is not uploaded. Plan to rewrite with other approaches, eg Tauri/Pyodide/Quarto to package & distribute it in the future.","title":"Installation"},{"location":"gui/#configuration","text":"Default settings are saved in the config.yml file, open with any text editor if need modification.","title":"Configuration"},{"location":"gui/#basic-usage","text":"","title":"Basic Usage"},{"location":"gui/#data-download","text":"","title":"Data Download"},{"location":"gui/#wafermap","text":"","title":"WaferMap"},{"location":"gui/#defectmap","text":"","title":"DefectMap"},{"location":"gui/#incomingmap","text":"","title":"IncomingMap"},{"location":"gui/#wif-trend","text":"","title":"WIF Trend"},{"location":"gui/#wif-trends","text":"","title":"WIF Trends"},{"location":"gui/#twiny-trends","text":"","title":"TwinY Trends"},{"location":"examples/","text":"Example Gallery \u00b6 This chapter is meant to demonstrate how wfmap works at a high level. More detailed information about each parameter is then provided in the API Reference","title":"Example Gallery"},{"location":"examples/#example-gallery","text":"This chapter is meant to demonstrate how wfmap works at a high level. More detailed information about each parameter is then provided in the API Reference","title":"Example Gallery"},{"location":"generated/gallery/","text":"Started \u00b6 NumHeatmap CatHeatmap WaferMap DefectMap IncomingMap WIF Trend WIF Trends TwinY Trends Download all examples in Python source code: gallery_python.zip Download all examples in Jupyter notebooks: gallery_jupyter.zip Gallery generated by mkdocs-gallery","title":"Index"},{"location":"generated/gallery/#started","text":"NumHeatmap CatHeatmap WaferMap DefectMap IncomingMap WIF Trend WIF Trends TwinY Trends Download all examples in Python source code: gallery_python.zip Download all examples in Jupyter notebooks: gallery_jupyter.zip Gallery generated by mkdocs-gallery","title":"Started"},{"location":"generated/gallery/mg_execution_times/","text":"Computation times \u00b6 00:47.268 total execution time for generated_gallery files: +-------------------------------------------------------------------------------------+-----------+--------+ | plot_7_twin_trends (docs/examples/plot_7_twin_trends.py) | 00:21.821 | 0.0 MB | +-------------------------------------------------------------------------------------+-----------+--------+ | plot_5_wif_trend (docs/examples/plot_5_wif_trend.py) | 00:05.824 | 0.0 MB | +-------------------------------------------------------------------------------------+-----------+--------+ | plot_0_nheatmap (docs/examples/plot_0_nheatmap.py) | 00:05.811 | 0.0 MB | +-------------------------------------------------------------------------------------+-----------+--------+ | plot_6_wif_trends (docs/examples/plot_6_wif_trends.py) | 00:04.582 | 0.0 MB | +-------------------------------------------------------------------------------------+-----------+--------+ | plot_2_wafermap (docs/examples/plot_2_wafermap.py) | 00:03.716 | 0.0 MB | +-------------------------------------------------------------------------------------+-----------+--------+ | plot_4_incmap (docs/examples/plot_4_incmap.py) | 00:02.385 | 0.0 MB | +-------------------------------------------------------------------------------------+-----------+--------+ | plot_3_defectmap (docs/examples/plot_3_defectmap.py) | 00:01.998 | 0.0 MB | +-------------------------------------------------------------------------------------+-----------+--------+ | plot_1_cheatmap (docs/examples/plot_1_cheatmap.py) | 00:01.131 | 0.0 MB | +-------------------------------------------------------------------------------------+-----------+--------+","title":"Computation times"},{"location":"generated/gallery/mg_execution_times/#computation-times","text":"00:47.268 total execution time for generated_gallery files: +-------------------------------------------------------------------------------------+-----------+--------+ | plot_7_twin_trends (docs/examples/plot_7_twin_trends.py) | 00:21.821 | 0.0 MB | +-------------------------------------------------------------------------------------+-----------+--------+ | plot_5_wif_trend (docs/examples/plot_5_wif_trend.py) | 00:05.824 | 0.0 MB | +-------------------------------------------------------------------------------------+-----------+--------+ | plot_0_nheatmap (docs/examples/plot_0_nheatmap.py) | 00:05.811 | 0.0 MB | +-------------------------------------------------------------------------------------+-----------+--------+ | plot_6_wif_trends (docs/examples/plot_6_wif_trends.py) | 00:04.582 | 0.0 MB | +-------------------------------------------------------------------------------------+-----------+--------+ | plot_2_wafermap (docs/examples/plot_2_wafermap.py) | 00:03.716 | 0.0 MB | +-------------------------------------------------------------------------------------+-----------+--------+ | plot_4_incmap (docs/examples/plot_4_incmap.py) | 00:02.385 | 0.0 MB | +-------------------------------------------------------------------------------------+-----------+--------+ | plot_3_defectmap (docs/examples/plot_3_defectmap.py) | 00:01.998 | 0.0 MB | +-------------------------------------------------------------------------------------+-----------+--------+ | plot_1_cheatmap (docs/examples/plot_1_cheatmap.py) | 00:01.131 | 0.0 MB | +-------------------------------------------------------------------------------------+-----------+--------+","title":"Computation times"},{"location":"generated/gallery/plot_0_nheatmap/","text":"!!! note Click [ here ] ( #download_links ) to download the full example code or to run this example in your browser via Binder NumHeatmap \u00b6 WaferMap for Numerical Variables This example demonstrates how to import a local module and how images are stacked when two plots are created in one code block. The variable N from the example \u2018Local module\u2019 (file local_module.py ) is imported in the code below. Further, note that when there is only one code block in an example, the output appears before the code block. from wfmap.data import load_data from wfmap import num_heatmap data = load_data () fig = num_heatmap ( data , 'MR' ) Total running time of the script: ( 0 minutes 5.811 seconds) Download Python source code: plot_0_nheatmap.py Download Jupyter notebook: plot_0_nheatmap.ipynb Gallery generated by mkdocs-gallery","title":"Plot 0 nheatmap"},{"location":"generated/gallery/plot_0_nheatmap/#numheatmap","text":"WaferMap for Numerical Variables This example demonstrates how to import a local module and how images are stacked when two plots are created in one code block. The variable N from the example \u2018Local module\u2019 (file local_module.py ) is imported in the code below. Further, note that when there is only one code block in an example, the output appears before the code block. from wfmap.data import load_data from wfmap import num_heatmap data = load_data () fig = num_heatmap ( data , 'MR' ) Total running time of the script: ( 0 minutes 5.811 seconds) Download Python source code: plot_0_nheatmap.py Download Jupyter notebook: plot_0_nheatmap.ipynb Gallery generated by mkdocs-gallery","title":"NumHeatmap"},{"location":"generated/gallery/plot_1_cheatmap/","text":"!!! note Click [ here ] ( #download_links ) to download the full example code or to run this example in your browser via Binder CatHeatmap \u00b6 WaferMap for Categorical Variables This example demonstrates how to import a local module and how images are stacked when two plots are created in one code block. The variable N from the example \u2018Local module\u2019 (file local_module.py ) is imported in the code below. Further, note that when there is only one code block in an example, the output appears before the code block. from wfmap.data import load_data from wfmap import cat_heatmap data = load_data () fig = cat_heatmap ( data , 'DEFECT' ) Total running time of the script: ( 0 minutes 1.131 seconds) Download Python source code: plot_1_cheatmap.py Download Jupyter notebook: plot_1_cheatmap.ipynb Gallery generated by mkdocs-gallery","title":"Plot 1 cheatmap"},{"location":"generated/gallery/plot_1_cheatmap/#catheatmap","text":"WaferMap for Categorical Variables This example demonstrates how to import a local module and how images are stacked when two plots are created in one code block. The variable N from the example \u2018Local module\u2019 (file local_module.py ) is imported in the code below. Further, note that when there is only one code block in an example, the output appears before the code block. from wfmap.data import load_data from wfmap import cat_heatmap data = load_data () fig = cat_heatmap ( data , 'DEFECT' ) Total running time of the script: ( 0 minutes 1.131 seconds) Download Python source code: plot_1_cheatmap.py Download Jupyter notebook: plot_1_cheatmap.ipynb Gallery generated by mkdocs-gallery","title":"CatHeatmap"},{"location":"generated/gallery/plot_2_wafermap/","text":"!!! note Click [ here ] ( #download_links ) to download the full example code or to run this example in your browser via Binder WaferMap \u00b6 Wafer Trend Charts by Flash Field For Very Different Two Variables WaferMap uses hot color(red) presents high value and cold value(blue) presents low value. uses hot/cold colors to the distribution and uniformity of nstrates how to import a local module and how images are stacked when two plots are created in one code block. The variable N from the example \u2018Local module\u2019 (file local_module.py ) is imported in the code below. Further, note that when there is only one code block in an example, the output appears before the code block. from wfmap.data import load_data from wfmap import wafermap data = load_data () fig = wafermap ( data , 'MR' , wftype = 'UP3' ) Total running time of the script: ( 0 minutes 3.716 seconds) Download Python source code: plot_2_wafermap.py Download Jupyter notebook: plot_2_wafermap.ipynb Gallery generated by mkdocs-gallery","title":"Plot 2 wafermap"},{"location":"generated/gallery/plot_2_wafermap/#wafermap","text":"Wafer Trend Charts by Flash Field For Very Different Two Variables WaferMap uses hot color(red) presents high value and cold value(blue) presents low value. uses hot/cold colors to the distribution and uniformity of nstrates how to import a local module and how images are stacked when two plots are created in one code block. The variable N from the example \u2018Local module\u2019 (file local_module.py ) is imported in the code below. Further, note that when there is only one code block in an example, the output appears before the code block. from wfmap.data import load_data from wfmap import wafermap data = load_data () fig = wafermap ( data , 'MR' , wftype = 'UP3' ) Total running time of the script: ( 0 minutes 3.716 seconds) Download Python source code: plot_2_wafermap.py Download Jupyter notebook: plot_2_wafermap.ipynb Gallery generated by mkdocs-gallery","title":"WaferMap"},{"location":"generated/gallery/plot_3_defectmap/","text":"!!! note Click [ here ] ( #download_links ) to download the full example code or to run this example in your browser via Binder DefectMap \u00b6 Wafer DefectMap with Pareto Subplot This example demonstrates how to import a local module and how images are stacked when two plots are created in one code block. The variable N from the example \u2018Local module\u2019 (file local_module.py ) is imported in the code below. Further, note that when there is only one code block in an example, the output appears before the code block. Out: /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:319: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect. from wfmap.data import load_data from wfmap import defectmap data = load_data () fig = defectmap ( data , 'DEFECT' ) Total running time of the script: ( 0 minutes 1.998 seconds) Download Python source code: plot_3_defectmap.py Download Jupyter notebook: plot_3_defectmap.ipynb Gallery generated by mkdocs-gallery","title":"Plot 3 defectmap"},{"location":"generated/gallery/plot_3_defectmap/#defectmap","text":"Wafer DefectMap with Pareto Subplot This example demonstrates how to import a local module and how images are stacked when two plots are created in one code block. The variable N from the example \u2018Local module\u2019 (file local_module.py ) is imported in the code below. Further, note that when there is only one code block in an example, the output appears before the code block. Out: /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:319: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect. from wfmap.data import load_data from wfmap import defectmap data = load_data () fig = defectmap ( data , 'DEFECT' ) Total running time of the script: ( 0 minutes 1.998 seconds) Download Python source code: plot_3_defectmap.py Download Jupyter notebook: plot_3_defectmap.ipynb Gallery generated by mkdocs-gallery","title":"DefectMap"},{"location":"generated/gallery/plot_4_incmap/","text":"!!! note Click [ here ] ( #download_links ) to download the full example code or to run this example in your browser via Binder IncomingMap \u00b6 Combined WaferMap for Wafer Incoming Data This example demonstrates how to import a local module and how images are stacked when two plots are created in one code block. The variable N from the example \u2018Local module\u2019 (file local_module.py ) is imported in the code below. Further, note that when there is only one code block in an example, the output appears before the code block. from wfmap.data import load_data from wfmap import create_incmap data = load_data () fig = create_incmap ( data , vsigmas = { 'MR' : 10 , 'HDI' : 1 }) Total running time of the script: ( 0 minutes 2.385 seconds) Download Python source code: plot_4_incmap.py Download Jupyter notebook: plot_4_incmap.ipynb Gallery generated by mkdocs-gallery","title":"Plot 4 incmap"},{"location":"generated/gallery/plot_4_incmap/#incomingmap","text":"Combined WaferMap for Wafer Incoming Data This example demonstrates how to import a local module and how images are stacked when two plots are created in one code block. The variable N from the example \u2018Local module\u2019 (file local_module.py ) is imported in the code below. Further, note that when there is only one code block in an example, the output appears before the code block. from wfmap.data import load_data from wfmap import create_incmap data = load_data () fig = create_incmap ( data , vsigmas = { 'MR' : 10 , 'HDI' : 1 }) Total running time of the script: ( 0 minutes 2.385 seconds) Download Python source code: plot_4_incmap.py Download Jupyter notebook: plot_4_incmap.ipynb Gallery generated by mkdocs-gallery","title":"IncomingMap"},{"location":"generated/gallery/plot_5_wif_trend/","text":"!!! note Click [ here ] ( #download_links ) to download the full example code or to run this example in your browser via Binder WIF Trend \u00b6 Wafer Trend Charts by Flash Field For Single Variables This example demonstrates how to import a local module and how images are stacked when two plots are created in one code block. The variable N from the example \u2018Local module\u2019 (file local_module.py ) is imported in the code below. Further, note that when there is only one code block in an example, the output appears before the code block. mkdocs_gallery_thumbnail_number = 2 \u00b6 WIF Trend \u00b6 Flash Field to flash field variation, The Flash to flash variation is based API All Input from wfmap.data import load_data from wfmap import wif_trend data = load_data () fig = wif_trend ( data , 'MR' ) Total running time of the script: ( 0 minutes 5.824 seconds) Download Python source code: plot_5_wif_trend.py Download Jupyter notebook: plot_5_wif_trend.ipynb Gallery generated by mkdocs-gallery","title":"Plot 5 wif trend"},{"location":"generated/gallery/plot_5_wif_trend/#wif-trend","text":"Wafer Trend Charts by Flash Field For Single Variables This example demonstrates how to import a local module and how images are stacked when two plots are created in one code block. The variable N from the example \u2018Local module\u2019 (file local_module.py ) is imported in the code below. Further, note that when there is only one code block in an example, the output appears before the code block.","title":"WIF Trend"},{"location":"generated/gallery/plot_5_wif_trend/#mkdocs_gallery_thumbnail_number-2","text":"","title":"mkdocs_gallery_thumbnail_number = 2"},{"location":"generated/gallery/plot_5_wif_trend/#wif-trend_1","text":"Flash Field to flash field variation, The Flash to flash variation is based API All Input from wfmap.data import load_data from wfmap import wif_trend data = load_data () fig = wif_trend ( data , 'MR' ) Total running time of the script: ( 0 minutes 5.824 seconds) Download Python source code: plot_5_wif_trend.py Download Jupyter notebook: plot_5_wif_trend.ipynb Gallery generated by mkdocs-gallery","title":"WIF Trend"},{"location":"generated/gallery/plot_6_wif_trends/","text":"!!! note Click [ here ] ( #download_links ) to download the full example code or to run this example in your browser via Binder WIF Trends \u00b6 Wafer Trend Charts by Flash Field For Multiple Variables within Similar Range This example demonstrates how to import a local module and how images are stacked when two plots are created in one code block. The variable N from the example \u2018Local module\u2019 (file local_module.py ) is imported in the code below. Further, note that when there is only one code block in an example, the output appears before the code block. Out: /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. from wfmap.data import load_data from wfmap import wif_trends data = load_data () fig = wif_trends ( data , [ 'MR' , 'MR2' ]) Total running time of the script: ( 0 minutes 4.582 seconds) Download Python source code: plot_6_wif_trends.py Download Jupyter notebook: plot_6_wif_trends.ipynb Gallery generated by mkdocs-gallery","title":"Plot 6 wif trends"},{"location":"generated/gallery/plot_6_wif_trends/#wif-trends","text":"Wafer Trend Charts by Flash Field For Multiple Variables within Similar Range This example demonstrates how to import a local module and how images are stacked when two plots are created in one code block. The variable N from the example \u2018Local module\u2019 (file local_module.py ) is imported in the code below. Further, note that when there is only one code block in an example, the output appears before the code block. Out: /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. /Users/xlhaw/opt/anaconda3/lib/python3.7/site-packages/wfmap-1.0.2.dev0-py3.7.egg/wfmap/__init__.py:343: MatplotlibDeprecationWarning: Adding an axes using the same arguments as a previous axes currently reuses the earlier instance. In a future version, a new instance will always be created and returned. Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance. from wfmap.data import load_data from wfmap import wif_trends data = load_data () fig = wif_trends ( data , [ 'MR' , 'MR2' ]) Total running time of the script: ( 0 minutes 4.582 seconds) Download Python source code: plot_6_wif_trends.py Download Jupyter notebook: plot_6_wif_trends.ipynb Gallery generated by mkdocs-gallery","title":"WIF Trends"},{"location":"generated/gallery/plot_7_twin_trends/","text":"!!! note Click [ here ] ( #download_links ) to download the full example code or to run this example in your browser via Binder TwinY Trends \u00b6 Wafer Trend Charts by Flash Field For Very Different Two Variables This example demonstrates how to import a local module and how images are stacked when two plots are created in one code block. The variable N from the example \u2018Local module\u2019 (file local_module.py ) is imported in the code below. Further, note that when there is only one code block in an example, the output appears before the code block. _R can see the correlation between two variables more clear Out: \"\\n# Twin Trends\\n\\nSome time it's . It's slightly different than put, it put the in secondary axis, some the two variables are have bigger gap or b.\\n\\nTake the Resistance of STO for example, before the OSR Wafer level rest is and while the STO_R(STO Resistance After Lapping)\\n\\nComparat to or put ba in the same y-axis, more,\\n\\nWith Different Hw and HDI_R can see the correlation between two variables more clear\\n\\n\" from wfmap.data import load_data from wfmap import twin_trends data = load_data () fig = twin_trends ( data , 'MR' , 'HDI' , keep_rng = False ) \"\"\" # Twin Trends Some time it's . It's slightly different than put, it put the in secondary axis, some the two variables are have bigger gap or b. Take the Resistance of STO for example, before the OSR Wafer level rest is and while the STO_R(STO Resistance After Lapping) Comparat to or put ba in the same y-axis, more, With Different Hw and HDI_R can see the correlation between two variables more clear \"\"\" Total running time of the script: ( 0 minutes 21.821 seconds) Download Python source code: plot_7_twin_trends.py Download Jupyter notebook: plot_7_twin_trends.ipynb Gallery generated by mkdocs-gallery","title":"Plot 7 twin trends"},{"location":"generated/gallery/plot_7_twin_trends/#twiny-trends","text":"Wafer Trend Charts by Flash Field For Very Different Two Variables This example demonstrates how to import a local module and how images are stacked when two plots are created in one code block. The variable N from the example \u2018Local module\u2019 (file local_module.py ) is imported in the code below. Further, note that when there is only one code block in an example, the output appears before the code block. _R can see the correlation between two variables more clear Out: \"\\n# Twin Trends\\n\\nSome time it's . It's slightly different than put, it put the in secondary axis, some the two variables are have bigger gap or b.\\n\\nTake the Resistance of STO for example, before the OSR Wafer level rest is and while the STO_R(STO Resistance After Lapping)\\n\\nComparat to or put ba in the same y-axis, more,\\n\\nWith Different Hw and HDI_R can see the correlation between two variables more clear\\n\\n\" from wfmap.data import load_data from wfmap import twin_trends data = load_data () fig = twin_trends ( data , 'MR' , 'HDI' , keep_rng = False ) \"\"\" # Twin Trends Some time it's . It's slightly different than put, it put the in secondary axis, some the two variables are have bigger gap or b. Take the Resistance of STO for example, before the OSR Wafer level rest is and while the STO_R(STO Resistance After Lapping) Comparat to or put ba in the same y-axis, more, With Different Hw and HDI_R can see the correlation between two variables more clear \"\"\" Total running time of the script: ( 0 minutes 21.821 seconds) Download Python source code: plot_7_twin_trends.py Download Jupyter notebook: plot_7_twin_trends.ipynb Gallery generated by mkdocs-gallery","title":"TwinY Trends"}]}